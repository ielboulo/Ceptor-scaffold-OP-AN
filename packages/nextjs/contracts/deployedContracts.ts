/**
 * This file is autogenerated by Scaffold-ETH.
 * You should not edit it manually or your changes might be overwritten.
 */
import { GenericContractsDeclaration } from "~~/utils/scaffold-eth/contract";

const deployedContracts = {
  31337: {
    ArtistMarketPlace: {
      address: "0x5FbDB2315678afecb367f032d93F642f64180aa3",
      abi: [
        {
          inputs: [
            {
              internalType: "uint256",
              name: "subscriptionId",
              type: "uint256",
            },
          ],
          stateMutability: "nonpayable",
          type: "constructor",
        },
        {
          inputs: [
            {
              internalType: "uint256",
              name: "suppliedAmount",
              type: "uint256",
            },
            {
              internalType: "uint256",
              name: "costPrice",
              type: "uint256",
            },
          ],
          name: "ErrorAmountNotSufficientToBuyArtwork",
          type: "error",
        },
        {
          inputs: [],
          name: "ErrorArtCommisionAlreadyDecided",
          type: "error",
        },
        {
          inputs: [],
          name: "ErrorArtWorkNotFound",
          type: "error",
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "artistWallet",
              type: "address",
            },
          ],
          name: "ErrorArtistNotFound",
          type: "error",
        },
        {
          inputs: [],
          name: "ErrorArtworkNotInTheSuppliedIndex",
          type: "error",
        },
        {
          inputs: [],
          name: "ErrorClientAlreadyCommentonTask",
          type: "error",
        },
        {
          inputs: [],
          name: "ErrorCommisionFlowNotFound",
          type: "error",
        },
        {
          inputs: [],
          name: "ErrorIncompleteArtWorkDetails",
          type: "error",
        },
        {
          inputs: [],
          name: "ErrorNoCommisionToWithdraw",
          type: "error",
        },
        {
          inputs: [
            {
              internalType: "uint256",
              name: "amount",
              type: "uint256",
            },
          ],
          name: "ErrorNotEnoughFundsSentToContract",
          type: "error",
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "sender",
              type: "address",
            },
          ],
          name: "ErrorNotTheArtistGiveProgress",
          type: "error",
        },
        {
          inputs: [],
          name: "ErrorRevertIncompleteCommisionDetails",
          type: "error",
        },
        {
          inputs: [],
          name: "ErrorTheCommisionFlowHasNotBeenAccepted",
          type: "error",
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "wallet",
              type: "address",
            },
          ],
          name: "ErrorUserAlreadyExsits",
          type: "error",
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "userWallet",
              type: "address",
            },
          ],
          name: "ErrorUserNotFound",
          type: "error",
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "have",
              type: "address",
            },
            {
              internalType: "address",
              name: "want",
              type: "address",
            },
          ],
          name: "OnlyCoordinatorCanFulfill",
          type: "error",
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "have",
              type: "address",
            },
            {
              internalType: "address",
              name: "owner",
              type: "address",
            },
            {
              internalType: "address",
              name: "coordinator",
              type: "address",
            },
          ],
          name: "OnlyOwnerOrCoordinator",
          type: "error",
        },
        {
          inputs: [],
          name: "ZeroAddress",
          type: "error",
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: false,
              internalType: "address",
              name: "vrfCoordinator",
              type: "address",
            },
          ],
          name: "CoordinatorSet",
          type: "event",
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "address",
              name: "from",
              type: "address",
            },
            {
              indexed: true,
              internalType: "address",
              name: "to",
              type: "address",
            },
          ],
          name: "OwnershipTransferRequested",
          type: "event",
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "address",
              name: "from",
              type: "address",
            },
            {
              indexed: true,
              internalType: "address",
              name: "to",
              type: "address",
            },
          ],
          name: "OwnershipTransferred",
          type: "event",
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: false,
              internalType: "uint256",
              name: "requestId",
              type: "uint256",
            },
            {
              indexed: false,
              internalType: "uint256[]",
              name: "randomWords",
              type: "uint256[]",
            },
          ],
          name: "RequestFulfilled",
          type: "event",
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: false,
              internalType: "uint256",
              name: "requestId",
              type: "uint256",
            },
            {
              indexed: false,
              internalType: "uint32",
              name: "numWords",
              type: "uint32",
            },
          ],
          name: "RequestSent",
          type: "event",
        },
        {
          inputs: [
            {
              internalType: "uint256",
              name: "artCommisionID",
              type: "uint256",
            },
            {
              internalType: "enum ArtistMarketPlace.ContractStatus",
              name: "contractStatus",
              type: "uint8",
            },
          ],
          name: "acceptDeclineArtCommision",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function",
        },
        {
          inputs: [],
          name: "acceptOwnership",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "uint256",
              name: "artWorkIndex",
              type: "uint256",
            },
          ],
          name: "buyArtWork",
          outputs: [],
          stateMutability: "payable",
          type: "function",
        },
        {
          inputs: [
            {
              components: [
                {
                  internalType: "address",
                  name: "wallet",
                  type: "address",
                },
                {
                  internalType: "string",
                  name: "name",
                  type: "string",
                },
                {
                  internalType: "enum ArtistMarketPlace.ArtType",
                  name: "style",
                  type: "uint8",
                },
                {
                  internalType: "uint256",
                  name: "numberoFArts",
                  type: "uint256",
                },
                {
                  internalType: "uint256",
                  name: "numberFeaturedTimes",
                  type: "uint256",
                },
                {
                  internalType: "uint256[]",
                  name: "artworks",
                  type: "uint256[]",
                },
                {
                  internalType: "uint256[]",
                  name: "commisions",
                  type: "uint256[]",
                },
              ],
              internalType: "struct ArtistMarketPlace.Artist",
              name: "newArtist",
              type: "tuple",
            },
          ],
          name: "createArtistUser",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function",
        },
        {
          inputs: [
            {
              components: [
                {
                  internalType: "address",
                  name: "wallet",
                  type: "address",
                },
                {
                  internalType: "uint256[]",
                  name: "favoriteArts",
                  type: "uint256[]",
                },
                {
                  internalType: "uint256[]",
                  name: "commisions",
                  type: "uint256[]",
                },
              ],
              internalType: "struct ArtistMarketPlace.Client",
              name: "newClient",
              type: "tuple",
            },
          ],
          name: "createClientUser",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function",
        },
        {
          inputs: [],
          name: "displayArtistOfTheDay",
          outputs: [
            {
              components: [
                {
                  internalType: "address",
                  name: "wallet",
                  type: "address",
                },
                {
                  internalType: "string",
                  name: "name",
                  type: "string",
                },
                {
                  internalType: "enum ArtistMarketPlace.ArtType",
                  name: "style",
                  type: "uint8",
                },
                {
                  internalType: "uint256",
                  name: "numberoFArts",
                  type: "uint256",
                },
                {
                  internalType: "uint256",
                  name: "numberFeaturedTimes",
                  type: "uint256",
                },
                {
                  internalType: "uint256[]",
                  name: "artworks",
                  type: "uint256[]",
                },
                {
                  internalType: "uint256[]",
                  name: "commisions",
                  type: "uint256[]",
                },
              ],
              internalType: "struct ArtistMarketPlace.Artist",
              name: "",
              type: "tuple",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [],
          name: "featuredArtistIndex",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "uint256",
              name: "index",
              type: "uint256",
            },
          ],
          name: "getArtist",
          outputs: [
            {
              components: [
                {
                  internalType: "address",
                  name: "wallet",
                  type: "address",
                },
                {
                  internalType: "string",
                  name: "name",
                  type: "string",
                },
                {
                  internalType: "enum ArtistMarketPlace.ArtType",
                  name: "style",
                  type: "uint8",
                },
                {
                  internalType: "uint256",
                  name: "numberoFArts",
                  type: "uint256",
                },
                {
                  internalType: "uint256",
                  name: "numberFeaturedTimes",
                  type: "uint256",
                },
                {
                  internalType: "uint256[]",
                  name: "artworks",
                  type: "uint256[]",
                },
                {
                  internalType: "uint256[]",
                  name: "commisions",
                  type: "uint256[]",
                },
              ],
              internalType: "struct ArtistMarketPlace.Artist",
              name: "artist",
              type: "tuple",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "uint256",
              name: "index",
              type: "uint256",
            },
          ],
          name: "getClient",
          outputs: [
            {
              components: [
                {
                  internalType: "address",
                  name: "wallet",
                  type: "address",
                },
                {
                  internalType: "uint256[]",
                  name: "favoriteArts",
                  type: "uint256[]",
                },
                {
                  internalType: "uint256[]",
                  name: "commisions",
                  type: "uint256[]",
                },
              ],
              internalType: "struct ArtistMarketPlace.Client",
              name: "client",
              type: "tuple",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [],
          name: "getRandomWords",
          outputs: [
            {
              internalType: "uint256",
              name: "requestId",
              type: "uint256",
            },
          ],
          stateMutability: "nonpayable",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256",
            },
          ],
          name: "lastRandomWords",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [],
          name: "lastRequestId",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [],
          name: "owner",
          outputs: [
            {
              internalType: "address",
              name: "",
              type: "address",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "uint256",
              name: "requestId",
              type: "uint256",
            },
            {
              internalType: "uint256[]",
              name: "randomWords",
              type: "uint256[]",
            },
          ],
          name: "rawFulfillRandomWords",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256",
            },
          ],
          name: "requestIds",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256",
            },
          ],
          name: "s_artCommision",
          outputs: [
            {
              internalType: "address",
              name: "client",
              type: "address",
            },
            {
              internalType: "address",
              name: "artist",
              type: "address",
            },
            {
              internalType: "string",
              name: "description",
              type: "string",
            },
            {
              internalType: "uint256",
              name: "budget",
              type: "uint256",
            },
            {
              internalType: "enum ArtistMarketPlace.ContractStatus",
              name: "contractStatus",
              type: "uint8",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256",
            },
          ],
          name: "s_artist",
          outputs: [
            {
              internalType: "address",
              name: "wallet",
              type: "address",
            },
            {
              internalType: "string",
              name: "name",
              type: "string",
            },
            {
              internalType: "enum ArtistMarketPlace.ArtType",
              name: "style",
              type: "uint8",
            },
            {
              internalType: "uint256",
              name: "numberoFArts",
              type: "uint256",
            },
            {
              internalType: "uint256",
              name: "numberFeaturedTimes",
              type: "uint256",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "",
              type: "address",
            },
          ],
          name: "s_artistCommision",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256",
            },
          ],
          name: "s_artworks",
          outputs: [
            {
              internalType: "string",
              name: "url",
              type: "string",
            },
            {
              internalType: "enum ArtistMarketPlace.ArtType",
              name: "artType",
              type: "uint8",
            },
            {
              internalType: "uint256",
              name: "cost",
              type: "uint256",
            },
            {
              internalType: "uint256",
              name: "likes",
              type: "uint256",
            },
            {
              internalType: "address",
              name: "creator",
              type: "address",
            },
            {
              internalType: "address",
              name: "owner",
              type: "address",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256",
            },
          ],
          name: "s_client",
          outputs: [
            {
              internalType: "address",
              name: "wallet",
              type: "address",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256",
            },
          ],
          name: "s_requests",
          outputs: [
            {
              internalType: "bool",
              name: "fulfilled",
              type: "bool",
            },
            {
              internalType: "bool",
              name: "exists",
              type: "bool",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [],
          name: "s_subscriptionId",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256",
            },
          ],
          name: "s_taskProgress",
          outputs: [
            {
              internalType: "string",
              name: "progressUrl",
              type: "string",
            },
            {
              internalType: "enum ArtistMarketPlace.TaskStatus",
              name: "taskStatus",
              type: "uint8",
            },
            {
              internalType: "enum ArtistMarketPlace.ClientApproval",
              name: "clientApproval",
              type: "uint8",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "",
              type: "address",
            },
          ],
          name: "s_users",
          outputs: [
            {
              internalType: "enum ArtistMarketPlace.UserType",
              name: "userType",
              type: "uint8",
            },
            {
              internalType: "address",
              name: "wallet",
              type: "address",
            },
            {
              internalType: "uint256",
              name: "clientID",
              type: "uint256",
            },
            {
              internalType: "uint256",
              name: "artistID",
              type: "uint256",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [],
          name: "s_vrfCoordinator",
          outputs: [
            {
              internalType: "contract IVRFCoordinatorV2Plus",
              name: "",
              type: "address",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [
            {
              components: [
                {
                  internalType: "string",
                  name: "url",
                  type: "string",
                },
                {
                  internalType: "enum ArtistMarketPlace.ArtType",
                  name: "artType",
                  type: "uint8",
                },
                {
                  internalType: "uint256",
                  name: "cost",
                  type: "uint256",
                },
                {
                  internalType: "uint256",
                  name: "likes",
                  type: "uint256",
                },
                {
                  internalType: "address",
                  name: "creator",
                  type: "address",
                },
                {
                  internalType: "address",
                  name: "owner",
                  type: "address",
                },
              ],
              internalType: "struct ArtistMarketPlace.ArtWork",
              name: "artwork",
              type: "tuple",
            },
          ],
          name: "saveArtWorkDetails",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "uint256",
              name: "commisionIndex",
              type: "uint256",
            },
            {
              components: [
                {
                  internalType: "string",
                  name: "progressUrl",
                  type: "string",
                },
                {
                  internalType: "enum ArtistMarketPlace.TaskStatus",
                  name: "taskStatus",
                  type: "uint8",
                },
                {
                  internalType: "enum ArtistMarketPlace.ClientApproval",
                  name: "clientApproval",
                  type: "uint8",
                },
              ],
              internalType: "struct ArtistMarketPlace.TaskProgress",
              name: "taskProgress",
              type: "tuple",
            },
          ],
          name: "saveNewTaskProgress",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "_vrfCoordinator",
              type: "address",
            },
          ],
          name: "setCoordinator",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function",
        },
        {
          inputs: [
            {
              components: [
                {
                  internalType: "address",
                  name: "client",
                  type: "address",
                },
                {
                  internalType: "address",
                  name: "artist",
                  type: "address",
                },
                {
                  internalType: "string",
                  name: "description",
                  type: "string",
                },
                {
                  internalType: "uint256",
                  name: "budget",
                  type: "uint256",
                },
                {
                  internalType: "enum ArtistMarketPlace.ContractStatus",
                  name: "contractStatus",
                  type: "uint8",
                },
                {
                  internalType: "uint256[]",
                  name: "taskProgress",
                  type: "uint256[]",
                },
              ],
              internalType: "struct ArtistMarketPlace.ArtCommision",
              name: "artCommision",
              type: "tuple",
            },
          ],
          name: "startNewArtCommision",
          outputs: [],
          stateMutability: "payable",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "to",
              type: "address",
            },
          ],
          name: "transferOwnership",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "uint256",
              name: "artCommisionID",
              type: "uint256",
            },
            {
              internalType: "enum ArtistMarketPlace.ClientApproval",
              name: "_clientApproval",
              type: "uint8",
            },
          ],
          name: "updateProgressReport",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function",
        },
        {
          inputs: [],
          name: "withdrawCommision",
          outputs: [],
          stateMutability: "payable",
          type: "function",
        },
        {
          stateMutability: "payable",
          type: "receive",
        },
      ],
      inheritedFunctions: {
        acceptOwnership: "@chainlink/contracts/src/v0.8/vrf/dev/VRFConsumerBaseV2Plus.sol",
        owner: "@chainlink/contracts/src/v0.8/vrf/dev/VRFConsumerBaseV2Plus.sol",
        rawFulfillRandomWords: "@chainlink/contracts/src/v0.8/vrf/dev/VRFConsumerBaseV2Plus.sol",
        s_vrfCoordinator: "@chainlink/contracts/src/v0.8/vrf/dev/VRFConsumerBaseV2Plus.sol",
        setCoordinator: "@chainlink/contracts/src/v0.8/vrf/dev/VRFConsumerBaseV2Plus.sol",
        transferOwnership: "@chainlink/contracts/src/v0.8/vrf/dev/VRFConsumerBaseV2Plus.sol",
      },
    },
  },
} as const;

export default deployedContracts satisfies GenericContractsDeclaration;
